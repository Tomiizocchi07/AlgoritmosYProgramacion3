Object subclass: #AlgoPedidos	instanceVariableNames: 'pedidos'	classVariableNames: ''	package: 'TP1'!!AlgoPedidos methodsFor: 'initialization' stamp: 'Tomas 10/30/2020 18:23'!initialize 	pedidos := OrderedCollection new.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:03'!cantidadProductosEnPedidoDe: unNombre	^ (self encontrarPedidoDe: unNombre) calcularCantidadTotalDeProductos.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/8/2020 17:18'!encontrarPedidoDe: unNombre	^ pedidos detect: [ :unPedido | (unPedido obtenerQuienPidio) = unNombre ]	! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 15:31'!removerProductoConNombre: unProducto para: unNombre	(self encontrarPedidoDe: unNombre) removerProducto: unProducto.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/8/2020 16:21'!crearPedidoConDeliveryPara: unNombre	| pedidoParaDelivery |	unNombre = '' ifTrue: [ PedidoSinNombreError signal ].	pedidoParaDelivery := PedidoParaDelivery new.	pedidoParaDelivery esElPedidoDe: unNombre.	pedidos add: pedidoParaDelivery.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 15:44'!removerMenuConNombre: unMenu para: unNombre	(self encontrarPedidoDe: unNombre) removerMenu: unMenu.	! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 10/30/2020 17:50'!agregarProductoConNombre: unProducto precio: unPrecio yCantidad: unaCantidad para: unNombre	(self encontrarPedidoDe: unNombre) agregarProductoConNombre: unProducto precio: unPrecio yCantidad: unaCantidad.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:06'!actualizarProductoConNombre: unProducto conCantidad: unaCantidad para: unNombre	(self encontrarPedidoDe: unNombre) actualizarProducto: unProducto conCantidad: unaCantidad.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/8/2020 16:22'!crearPedidoParaRetirarPara: unNombre	| pedidoParaRetirar |	unNombre = '' ifTrue: [ PedidoSinNombreError signal ].	pedidoParaRetirar := PedidoParaRetirar new.	pedidoParaRetirar esElPedidoDe: unNombre.	pedidos add: pedidoParaRetirar	! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:50'!agregarCuponAPedidoDe: unNombre conValor: unValor	| cupon |	cupon := CuponValorFijo conValor: unValor.	(self encontrarPedidoDe: unNombre) agregarCupon: cupon.	! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 10/31/2020 19:25'!precioPedidoDe: unNombre	^ (self encontrarPedidoDe: unNombre) calcularTotal.			! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:15'!removerCuponDePedidoDe: unNombre	(self encontrarPedidoDe: unNombre) removerCuponDeDescuento.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:09'!agregarMenuConNombre: unMenu precio: unPrecio yCantidad: unaCantidad para: unNombre	(self encontrarPedidoDe: unNombre) agregarMenuConNombre: unMenu precio: unPrecio yCantidad: unaCantidad.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Tomas 11/5/2020 14:56'!agregarCuponAPedidoDe: unNombre conPorcentaje: unPorcentaje 	| cupon |	cupon := CuponPorcentual conPorcentaje: unPorcentaje.	(self encontrarPedidoDe: unNombre) agregarCupon: cupon.! !Object subclass: #Cupones	instanceVariableNames: 'cupon'	classVariableNames: ''	package: 'TP1'!!Cupones methodsFor: 'accessing' stamp: 'Tomas 11/8/2020 16:30'!cupon: unCupon	(unCupon > 0) ifFalse: [ CuponConValorIgualOMenorQueCeroError signal ].	cupon := unCupon.! !!Cupones methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:29'!calcularTotalConDescuento: unTotal	self subclassResponsibility ! !Cupones subclass: #CuponPorcentual	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CuponPorcentual methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:31'!calcularTotalConDescuento: unTotal	^ (unTotal - (unTotal * (cupon/100)))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuponPorcentual class	instanceVariableNames: ''!!CuponPorcentual class methodsFor: 'as yet unclassified' stamp: 'Tomas 11/5/2020 16:32'!conPorcentaje: unPorcentaje	|unCupon|.	(unPorcentaje > 100) ifTrue: [PorcentajeFueraDeRangoError signal].	unCupon := self new.	unCupon cupon: unPorcentaje.	^unCupon.! !Cupones subclass: #CuponValorFijo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CuponValorFijo methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:31'!calcularTotalConDescuento: unTotal	^ (unTotal - cupon)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuponValorFijo class	instanceVariableNames: ''!!CuponValorFijo class methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:24'!conValor: unValor	|unCupon|	unCupon := self new.	unCupon cupon: unValor.	^unCupon.! !Error subclass: #NombreVacioError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #NumeroMenorOIgualQueCeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!NumeroMenorOIgualQueCeroError subclass: #CantidadMenorOIgualQueCeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!NumeroMenorOIgualQueCeroError subclass: #CuponConValorIgualOMenorQueCeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Pedido	instanceVariableNames: 'nombre productos pidioMenu cupon'	classVariableNames: ''	package: 'TP1'!!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:50'!agregarCupon: unCupon	cupon := unCupon.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:27'!removerProducto: unProducto	productos removeAllSuchThat: [ :unProductoElegido | (unProductoElegido obtenerNombreProducto ) = unProducto ]! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:26'!removerMenu: unMenu 	productos removeAllSuchThat: [ :unMenuElegido | (unMenuElegido obtenerNombreProducto ) = unMenu ]! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:46'!calcularTotalSinConsiderarElTipoDePedido	|totalParcial|	totalParcial := (productos inject: 0 into: [ :contador :producto | contador + producto precioTotal ]).	pidioMenu ifFalse: [ (cupon isNotNil) ifTrue: [ totalParcial := cupon calcularTotalConDescuento: totalParcial ] ].	^ totalParcial				! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:02'!calcularCantidadTotalDeProductos	|cantidadTotal|	cantidadTotal := (productos inject: 0 into: [ :contador :cantidad | contador + cantidad obtenerCantidad ]).	^ cantidadTotal.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 10/30/2020 18:28'!obtenerQuienPidio	^ nombre! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:16'!removerCuponDeDescuento	cupon := nil.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:11'!encontrarProducto: unProductoElegido	^ productos detect: [ :unProducto | (unProducto obtenerNombreProducto) = unProductoElegido ]! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 10/31/2020 19:30'!calcularTotal	^ self subclassResponsibility ! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:12'!agregarMenuConNombre: unMenuElegido precio: unPrecio yCantidad: unaCantidad	| unMenu |	unMenu := Producto conNombre: unMenuElegido precio: unPrecio yCantidad: unaCantidad.	pidioMenu := true.	productos add: unMenu.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 10/31/2020 17:06'!esElPedidoDe: unNombre	nombre := unNombre! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/5/2020 17:42'!actualizarProducto: unProducto conCantidad: unaCantidad	(self encontrarProducto: unProducto) cantidad: unaCantidad.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:12'!agregarProductoConNombre: unNombre precio: unPrecio yCantidad: unaCantidad	| unProducto |	unProducto := Producto conNombre: unNombre precio: unPrecio yCantidad: unaCantidad.	productos add: unProducto.! !!Pedido methodsFor: 'accessing' stamp: 'Tomas 11/8/2020 17:35'!pidioMenu	^ pidioMenu! !!Pedido methodsFor: 'initialization' stamp: 'Tomas 11/1/2020 01:12'!initialize 	productos := OrderedCollection new.	pidioMenu := false.! !Pedido subclass: #PedidoParaDelivery	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!PedidoParaDelivery methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:36'!calcularTotal	^ self calcularTotalSinConsiderarElTipoDePedido * 1.2! !Pedido subclass: #PedidoParaRetirar	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!PedidoParaRetirar methodsFor: 'as yet unclassified' stamp: 'Tomas 11/1/2020 01:36'!calcularTotal	^ self calcularTotalSinConsiderarElTipoDePedido ! !NombreVacioError subclass: #PedidoSinNombreError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #PorcentajeFueraDeRangoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!NumeroMenorOIgualQueCeroError subclass: #PrecioMenorOIgualQueCeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Producto	instanceVariableNames: 'producto cantidad precio'	classVariableNames: ''	package: 'TP1'!!Producto methodsFor: 'accessing' stamp: 'Tomas 10/31/2020 19:14'!precioTotal	^ (precio * cantidad).! !!Producto methodsFor: 'accessing' stamp: 'Tomas 11/5/2020 17:16'!cantidad: unaCantidad	unaCantidad > 0 ifFalse: [ CantidadMenorOIgualQueCeroError signal ].	cantidad := unaCantidad.! !!Producto methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 15:33'!obtenerNombreProducto	^ producto! !!Producto methodsFor: 'as yet unclassified' stamp: 'Tomas 11/8/2020 16:12'!conNombre: unNombre yPrecio: unPrecio	unNombre = '' ifTrue: [ ProductoSinNombreError signal ].	producto := unNombre.	unPrecio <= 0 ifTrue: [ PrecioMenorOIgualQueCeroError signal ].	precio := unPrecio.! !!Producto methodsFor: 'as yet unclassified' stamp: 'Tomas 11/2/2020 16:02'!obtenerCantidad	^ cantidad! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Producto class	instanceVariableNames: ''!!Producto class methodsFor: 'as yet unclassified' stamp: 'Tomas 11/5/2020 17:32'!conNombre: unNombre precio: unPrecio yCantidad: unaCantidad	| unPedido |	unPedido := Producto new.	unPedido conNombre: unNombre yPrecio: unPrecio.	unPedido cantidad: unaCantidad.	^ unPedido.! !NombreVacioError subclass: #ProductoSinNombreError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!